---
import type { MarkdownHeading } from "astro";
import FormattedDate from "../components/FormattedDate.astro";
import Layout from "./Layout.astro";

interface Props {
	title: string;
	description: string;
	pubDate?: Date;
	thumbnail: string;
	headings: MarkdownHeading[];
	caption?: string;
}

const { title, description, pubDate, thumbnail, headings, caption } = Astro.props;
---

<Layout title={title} description={description} image={thumbnail || undefined}>
	<div class="relative" id="top">
		<div class="px-8 pt-10">
			<article class="max-w-3xl m-auto slide-enter-content pb32">
				<div class="mb-8">
					<h1 class="leading-none text-2xl md:text-5xl font-bold mb-4" id={title.replace(/\s+/g, "-").toLowerCase()}>{title}</h1>
					<p class="text-sm">
						{pubDate && <FormattedDate date={pubDate} />}
					</p>
					{
						thumbnail && (
							<figure class="w-full h-fit object-contain">
								<picture>
									<img src={thumbnail} alt={"Thumbnail for " + title} class="rounded-lg mt-8 shimmer aspect-video w-full h-auto" />
								</picture>
								{caption && <figcaption class="text-xs mt-2 text-gray-500 dark:text-gray-400">Image: {caption}</figcaption>}
							</figure>
						)
					}
				</div>
				<nav class="fixed top-32 right-8 h-500px flex-col group xl:flex z-99 hidden lg:block">
					<div class="relative group w-62 h-500px">
						<div class="grid space-y-2 absolute top-0 right-0">
							<div class="grid space-y-2">
								{
									headings.map((h) => (
										<div
											data-slug={h.slug}
											class="w-5 h-2 bg-l-on-base dark:bg-d-on-base rounded-sm transition-all duration-500 ease-in-out heading-indicator opacity-10"
										/>
									))
								}
							</div>
						</div>
						<div
							class="max-h-500px bg-l-base dark:(bg-d-base border-d-on-base/10) grid absolute top-0 right-0 border border-l-on-base/10 rounded-lg p-4 overflow-y-auto group-hover:(opacity-100 translate-x-0) translate-x-4 opacity-0 transition-all duration-500 ease-in-out">
							<div class="justify-center flex-col w-full z-90 list-none bg-l-base dark:(bg-d-base) grid h-fit">
								<a
									href={`#${title.replace(/\s+/g, "-").toLowerCase()}`}
									class="text-xs transition-all duration-300 ease-in-out whitespace-pre-wrap px-2 hover:(bg-l-on-base/10 dark:bg-d-on-base/10 opacity-100) opacity-50 transition-all duration-100 ease-in-out rounded-sm py-1"
									>{title.trim()}</a
								>
								{
									headings.map((h) => (
										<a
											href={`#${h.slug}`}
											class="text-xs transition-all duration-300 ease-in-out whitespace-pre-wrap px-2 hover:(bg-l-on-base/10 dark:bg-d-on-base/10 opacity-100) opacity-50 transition-all duration-100 ease-in-out rounded-sm py-1"
											style={`margin-left: ${h.depth * 1}rem;`}>
											{h.text.trim()}
										</a>
									))
								}
							</div>
						</div>
					</div>
				</nav>
				<details
					class="group top-32 right-8 flex-col z-99 block bg-l-on-base/10 dark:bg-d-on-base/10 md:hidden p-4 rounded-md">
					<summary class="relative flex items-center gap-1"><i  class="i-myna-list w-5 h-5"></i> Table of Contents</summary>
					<nav class="relative grid gap-1 mt-4">
						<a href={`#${title.replace(/\s+/g, "-").toLowerCase()}`} class="decoration-none">{title.trim()}</a>
						{
							headings.map((h) => (
								<a href={`#${h.slug}`} class="decoration-none" style={`margin-left: ${h.depth * 1}rem;`}>
									{h.text.trim()}
								</a>
							))
						}
					</nav>
				</details>
				<div class="prose w-full max-w-none">
					<slot />
				</div>
			</article>
		</div>
	</div>
	<a href="#top" id="back-to-top" class="fixed lg:bottom-4 bottom-16 right-4 m-4 i-solar-alt-arrow-up-bold w8 h8 z-100"> </a>
</Layout>

<script>
	const headingIndicator = document.querySelectorAll(".heading-indicator");
	const slugs = Array.from(headingIndicator).map((h) => (h as HTMLElement).dataset.slug);
	const headingsScrollPos = slugs.map((slug) => {
		const heading = document.querySelector(`#${CSS.escape(slug!)}`);
		if (heading) {
			return heading.getBoundingClientRect().top + window.scrollY;
		}
		return 0;
	});

	let lastVisibleHeading = (headingIndicator[0] as HTMLElement).dataset.slug;
	let scrollIndex = 0;

	window.addEventListener("scroll", () => {
		const scrollPos = window.scrollY;

		if (scrollPos > headingsScrollPos[scrollIndex]) {
			scrollIndex++;
			lastVisibleHeading = slugs[scrollIndex];
		} else if (scrollPos < headingsScrollPos[scrollIndex - 1]) {
			scrollIndex--;
			lastVisibleHeading = slugs[scrollIndex];
		}

		document.querySelectorAll(".heading-indicator").forEach((h) => {
			let tocItem = document.querySelector(`a[href="#${(h as HTMLElement).dataset.slug}"]`) as HTMLElement;
			if (lastVisibleHeading === (h as HTMLElement).dataset.slug) {
				tocItem.style.opacity = "100%";
				(h as HTMLElement).style.opacity = "75%";
			} else {
				tocItem.removeAttribute("style");
				tocItem?.classList.remove("bg-d-on-base/10");
				(h as HTMLElement).style.opacity = "10%";
			}
		});
	});
</script>

<style is:global>
	.prose h1 {
		font-size: 2.5rem;
	}

	.prose pre {
		padding: 1rem 1.5rem;
		font-family: "JetBrains Mono", monospace;
	}
</style>
