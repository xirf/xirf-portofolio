---
import Layout from "../layouts/Layout.astro";

export const prerender = false;
---

<Layout title="Woops, looks like you're lost" description="The page you're looking for doesn't exist.">
	<div class="flex min-h-80vh p-12 max-w-6xl mx-auto relative items-center justify-center">
		<main class="flex flex-col gap-2 slide-enter-content max-w-sm text-center bg-gradient-to-t from-#101417 to-#212a34 p-8 rounded-3xl">
			<h1 class="text-center text-3xl font-bold text-#e5e7eb">404</h1>
			<div class="w-full h-full max-w-xs max-h-xs relative mx-auto flex items-center justify-center my-4">
				<div class="flex flex-col" id="ghost">
					<div id="ghost-body" class="rounded-t-full w32 h34 grid place-items-center bg-white"></div>
					<div class="grid place-items-center absolute top-12 z-100 left-1/2 -translate-x-1/2">
						<div
							class="face w-20 h7"
							style="--left-lower-rotation:20deg;--left-lower-position:40%;--left-upper-rotation:0deg;--left-upper-position:0%;--right-lower-rotation:-20deg;--right-lower-position:40%;--right-upper-rotation:0deg;--right-upper-position:0%;--face-rotation-x:0deg;--face-rotation-y:0deg;--face-rotation-z:0deg;">
							<div class="eye left">
								<div class="lower">
									<div class="lid"></div>
								</div>
								<div class="upper">
									<div class="lid"></div>
								</div>
							</div>
							<div class="eye right">
								<div class="lower">
									<div class="lid"></div>
								</div>
								<div class="upper">
									<div class="lid"></div>
								</div>
							</div>
						</div>
					</div>
					<div id="ghost-bottom" class="grid grid-cols-5 w-full -mt-4 z-2">
						{
							Array.from({ length: 5 }).map((_, i) => (
								<div class:list={["w-full h7 rounded-50px", i % 2 === 0 ? "bg-white" : "bg-#151b20"]} />
							))
						}
					</div>
				</div>
			</div>
			<h2 class="text-center text-lg text-white">Oops !</h2>
			<p class="text-center text-gray-400">It looks like we couldn't find the page you were looking for.</p>
			<a href="/" class="text-center text-white underline">Let's go back home</a>
		</main>
	</div>
</Layout>

<script is:inline>
	console.log("Eyes animation credited to Zed Dash on https://codepen.io/z-/pen/wvBPvby, with some modification");

	let states = {
		neutral: {
			face: {
				rotationX: 0,
				rotationY: 0,
				rotationZ: 0,
			},
			left: {
				lower: {
					rotation: 0,
					position: 0,
				},
				upper: {
					rotation: 0,
					position: 0,
				},
			},
			right: {
				lower: {
					rotation: 0,
					position: 0,
				},
				upper: {
					rotation: 0,
					position: 0,
				},
			},
		},
		sad: {
			face: {
				rotationX: 0,
				rotationY: 0,
				rotationZ: 0,
			},
			left: {
				lower: {
					rotation: 0,
					position: 0,
				},
				upper: {
					rotation: -20,
					position: 40,
				},
			},
			right: {
				lower: {
					rotation: 0,
					position: 0,
				},
				upper: {
					rotation: 20,
					position: 40,
				},
			},
		},
		
		pain: {
			face: {
				rotationX: 0,
				rotationY: 0,
				rotationZ: 0,
			},
			left: {
				lower: {
					rotation: 10,
					position: 20,
				},
				upper: {
					rotation: -10,
					position: 20,
				},
			},
			right: {
				lower: {
					rotation: -10,
					position: 20,
				},
				upper: {
					rotation: 10,
					position: 20,
				},
			},
		},
	};

	let face = document.querySelector(".face");
	const setState = (state) => {
		if (states[state] == undefined) return;
		face.setAttribute(
			"style",
			`
        --left-lower-rotation:${states[state].left.lower.rotation}deg;
        --left-lower-position:${states[state].left.lower.position}%;
        --left-upper-rotation:${states[state].left.upper.rotation}deg;
        --left-upper-position:${states[state].left.upper.position}%;
        --right-lower-rotation:${states[state].right.lower.rotation}deg;
        --right-lower-position:${states[state].right.lower.position}%;
        --right-upper-rotation:${states[state].right.upper.rotation}deg;
        --right-upper-position:${states[state].right.upper.position}%;
        --face-rotation-x:${states[state].face.rotationX}deg;
        --face-rotation-y:${states[state].face.rotationY}deg;
        --face-rotation-z:${states[state].face.rotationZ}deg;
    `
		);
	};

	let emotions = Object.keys(states);
	let previous = ["sad"];
	setState("sad");

	const nextState = () => {
		let ind = Math.floor(Math.random() * emotions.length);
		if (previous.indexOf(ind) != -1) return nextState();
		previous.push(ind);
		previous = previous.slice(-2);
		return ind;
	};

	setInterval(() => {
		setState(emotions[nextState()]);
	}, 1500);
</script>

<style is:inline>
	@keyframes float {
		0%,
		100% {
			transform: translateY(-5%);
		}
		50% {
			transform: translateY(5%);
		}
	}
	body .face {
		--left-lower-rotation: 0deg;
		--left-lower-position: 0%;
		--left-upper-rotation: 0deg;
		--left-upper-position: 0%;
		--right-lower-rotation: 0deg;
		--right-lower-position: 0%;
		--right-upper-rotation: 0deg;
		--right-upper-position: 0%;
		--face-rotation-x: 0deg;
		--face-rotation-y: 0deg;
		--face-rotation-z: 0deg;
		display: grid;
		grid-template-columns: var(--eye-size) var(--eye-gap) var(--eye-size);
		grid-template-rows: var(--eye-size);
		grid-template-areas: "left . right";
		filter: blur(4px) contrast(8);
		transform: translateZ(8vmin) rotateX(var(--face-rotation-x)) rotateY(var(--face-rotation-y)) rotateZ(var(--face-rotation-z));
		transition: 0.75s cubic-bezier(0.25, 0.5, 0.5, 1);
		mix-blend-mode: lighten;
	}
	body .face .eye {
		position: relative;
		background: black;
		border-radius: 100%;
		overflow: hidden;
		box-shadow: 0 0 0 8px white;
	}
	body .face .eye,
	body .face .eye * {
		transition: 0.5s cubic-bezier(0.75, 0.25, 0.25, 0.75);
	}
	body .face .eye > div {
		--rotation: 0deg;
		--position: 0%;
		position: absolute;
		top: 0;
		left: 0;
		width: 100%;
		height: 100%;
		transform: rotate(var(--rotation));
	}
	body .face .eye > div .lid {
		position: absolute;
		width: 100%;
		height: 100%;
		background: white;
	}
	body .face .eye > div.lower .lid {
		top: calc(100% - var(--position));
	}
	body .face .eye > div.upper .lid {
		bottom: calc(100% - var(--position));
	}
	body .face .eye.left {
		grid-area: left;
	}
	body .face .eye.left .lower {
		--rotation: var(--left-lower-rotation);
		--position: var(--left-lower-position);
	}
	body .face .eye.left .upper {
		--rotation: var(--left-upper-rotation);
		--position: var(--left-upper-position);
	}
	body .face .eye.right {
		grid-area: right;
	}
	body .face .eye.right .lower {
		--rotation: var(--right-lower-rotation);
		--position: var(--right-lower-position);
	}
	body .face .eye.right .upper {
		--rotation: var(--right-upper-rotation);
		--position: var(--right-upper-position);
	}

    @keyframes float {
        0%,
        100% {
            transform: translateY(-1%);
        }
        50% {
            transform: translateY(1%);
        }
    }

    #ghost{
        animation: float 2s ease-in-out infinite;
    }
</style>
